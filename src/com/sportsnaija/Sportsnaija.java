package com.sportsnaija;



import static com.codename1.ui.CN.*;
import com.codename1.ui.Button;
import com.codename1.ui.Form;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Command;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.io.Log;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.Label;
import com.codename1.ui.SideMenuBar;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.util.UITimer;
import java.io.IOException;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class Sportsnaija {

    private Form current;
    private Resources theme;
     private Resources cards;

    private Form home;

    public void init(Object context) {
        try {
            theme = Resources.openLayered("/theme");
            UIManager.getInstance().setThemeProps(theme.getTheme(theme.getThemeResourceNames()[0]));
            UIManager.getInstance().getLookAndFeel().setMenuBarClass(SideMenuBar.class);
            cards = Resources.open("/theme.res", calculateDPI());
            Display.getInstance().setCommandBehavior(Display.COMMAND_BEHAVIOR_SIDE_NAVIGATION);
        } catch(IOException e){
            e.printStackTrace();
        }

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
         SplashScreen();
    }      
        //create and build the home Form
    public void HomeForm() {     
        home = new Form("Sport Naija", new GridLayout(4,3));
 Image imb1 = FontImage.createMaterial(FontImage.MATERIAL_LOCATION_CITY, UIManager.getInstance().getComponentStyle("Command"));
Button b1 = new Button("GLOBAL",imb1);
        b1.addActionListener((ActionListener) (ActionEvent evt) -> {
            
            globalsport gl = new globalsport();
           gl.globalsport();
           }); 
        
        home.add(b1);
        Image imb2 = FontImage.createMaterial(FontImage.MATERIAL_GRAPHIC_EQ, UIManager.getInstance().getComponentStyle("Command"));
Button b2 = new Button("LIVESCORE",imb2);
         b2.addActionListener((ActionListener) (ActionEvent evt) -> {
            
            livescore gl = new livescore();
            gl.livescore();
           }); 
        home.add(b2);
        
        Image imb3 = FontImage.createMaterial(FontImage.MATERIAL_VIDEOCAM, UIManager.getInstance().getComponentStyle("Command"));
        Button b3 = new Button("VIDEO",imb3);
       b3.addActionListener((ActionListener) (ActionEvent evt) -> {
            
            video gl = new video();
            gl.video();
           }); 
        home.add(b3);
        
         Image imb4 = FontImage.createMaterial(FontImage.MATERIAL_LAPTOP_CHROMEBOOK, UIManager.getInstance().getComponentStyle("Command"));
Button b4 = new Button("NAIJA SPORT",imb4);
        b4.addActionListener((ActionListener) (ActionEvent evt) -> {
            
            naija gl = new naija();
            gl.naija();
           }); 
        home.add(b4);
        
         Image imb5 = FontImage.createMaterial(FontImage.MATERIAL_COLLECTIONS, UIManager.getInstance().getComponentStyle("Command"));
        Button b5 = new Button("CHAMPIONSHIP",imb5);
       b5.addActionListener((ActionListener) (ActionEvent evt) -> {
            
            championship gl = new championship();
            gl.championship();
           }); 
        home.add(b5);
        
         Image imb6 = FontImage.createMaterial(FontImage.MATERIAL_LOCAL_OFFER, UIManager.getInstance().getComponentStyle("Command"));
Button b6 = new Button("TRANSFERS",imb6);
        b6.addActionListener((ActionListener) (ActionEvent evt) -> {
            
            transfers gl = new transfers();
            gl.transfers();
           }); 
        home.add(b6);
        
         Image imb7 = FontImage.createMaterial(FontImage.MATERIAL_GOLF_COURSE, UIManager.getInstance().getComponentStyle("Command"));
        Button b7 = new Button("BASKETBALL",imb7);
        b7.addActionListener((ActionListener) (ActionEvent evt) -> {
            
            basketball gl = new basketball();
            gl.basketball();
           }); 
        home.add(b7);
        
         Image imb8 = FontImage.createMaterial(FontImage.MATERIAL_PUBLISH, UIManager.getInstance().getComponentStyle("Command"));
        Button b8 = new Button("PUSH", imb8);
        b8.addActionListener((ActionListener) (ActionEvent evt) -> {
            
            //livescore gl = new livescore();
            //gl.globalsport();
          System.out.println("Push notification soon...");
           }); 
        home.add(b8);
        
         Image imb9 = FontImage.createMaterial(FontImage.MATERIAL_TAP_AND_PLAY, UIManager.getInstance().getComponentStyle("Command"));
        Button b9 = new Button("TENNIS", imb9);
        b9.addActionListener((ActionListener) (ActionEvent evt) -> {
            
           tennis gl = new tennis();
           gl.tennis();
         
           }); 
        home.add(b9);
home.show();
           
      

    //about
        Image im = FontImage.createMaterial(FontImage.MATERIAL_INFO_OUTLINE, UIManager.getInstance().getComponentStyle("Command"));
        Command edit = new Command("About", im) {

            @Override
            public void actionPerformed(ActionEvent evt) {
                about bt  = new about();
                bt.about();
            }
        };
        home.getToolbar().addCommandToOverflowMenu(edit);

        im = FontImage.createMaterial(FontImage.MATERIAL_MESSAGE, UIManager.getInstance().getComponentStyle("Command"));
        Command add = new Command("Contact", im) {
            @Override
            public void actionPerformed(ActionEvent evt) {
                contact ct = new contact();
                ct.contact();
            }
            
        };
        home.getToolbar().addCommandToOverflowMenu(add);

      
        home.show();
    }

    protected void setBackCommand(Form f) {
        Command back = new Command("") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                home.showBack();
            }

        };
        Image img = FontImage.createMaterial(FontImage.MATERIAL_ARROW_BACK, UIManager.getInstance().getComponentStyle("TitleCommand"));
        back.setIcon(img);
        f.getToolbar().addCommandToLeftBar(back);
        f.getToolbar().setTitleCentered(true);
        f.setBackCommand(back);
    }

    public void stop() {
        current = getCurrentForm();
    }

    public void destroy() {
    }
     
     public void SplashScreen(){
           final Form splash = new Form("Sports Naija");
        
        // a border layout places components in the center and the 4 sides.
        // by default it scales the center component so here we configure
        // it to place the component in the actual center
        BorderLayout border = new BorderLayout();
        border.setCenterBehavior(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE);
        splash.setLayout(border);
        
        // by default the form's content pane is scrollable on the Y axis
        // we need to disable it here
        splash.setScrollable(false);
        Label title = new Label();
        
        // The UIID is used to determine the appearance of the component in the theme
        title.setUIID("SplashTitle");
        Label subtitle = new Label("Sport Naija Copyright, 2018");
        subtitle.setUIID("SplashSubTitle");
        
        splash.addComponent(BorderLayout.NORTH, title);
        splash.addComponent(BorderLayout.SOUTH, subtitle);
        Label as = new Label(cards.getImage("sport-icons1.jpg"));
        Label ah = new Label(cards.getImage("sport-icons1.jpg"));
        Label ac = new Label(cards.getImage("13.png"));
        Label ad = new Label(cards.getImage("13.png"));

        // a layered layout places components one on top of the other in the same dimension, it is
        // useful for transparency but in this case we are using it for an animation
        final Container center = new Container(new LayeredLayout());
        center.addComponent(as);
        center.addComponent(ah);
        center.addComponent(ac);
        center.addComponent(ad);
        
        splash.addComponent(BorderLayout.CENTER, center);
                
        splash.show();
        splash.setTransitionOutAnimator(CommonTransitions.createCover(CommonTransitions.SLIDE_VERTICAL, true, 800));

        // postpone the animation to the next cycle of the EDT to allow the UI to render fully once
        Display.getInstance().callSerially(() -> {
            // We replace the layout so the cards will be laid out in a line and animate the hierarchy
            // over 2 seconds, this effectively creates the effect of cards spreading out
            center.setLayout(new BoxLayout(BoxLayout.X_AXIS));
            center.setShouldCalcPreferredSize(true);
            splash.getContentPane().animateHierarchy(3000);
            
            // after showing the animation we wait for 2.5 seconds and then show the game with a nice
            // transition, notice that we use UI timer which is invoked on the Codename One EDT thread!
            new UITimer(() -> {
                HomeForm();
            }).schedule(2500, false, splash);
           });
        
}
     
     //calculate DPI
     private int calculateDPI() {
        int pixels = Display.getInstance().getDisplayHeight() * Display.getInstance().getDisplayWidth();
        if(pixels > 1000000) {
            return Display.DENSITY_HD;
        }
        if(pixels > 340000) {
            return Display.DENSITY_VERY_HIGH;
        }
        if(pixels > 150000) {
            return Display.DENSITY_HIGH;
        }
        return Display.DENSITY_MEDIUM;
    }
}
